
<launch>

    <!-- This launch file initializes a full simulation environment -->
    <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>
    <arg name="configuration_basename" default="turtlebot3_lds_2d.lua"/>
    <arg name="set_base_frame" default="base_footprint"/>
    <arg name="set_odom_frame" default="odom"/>
    <arg name="set_map_frame"  default="map"/>

    <!-- Load the simulation world -->
  <include file="$(find composit_planner)/launch/world_sim.launch"/>

    <!-- RVIZ and Gazebo helper tools -->
  <include file="$(find turtlebot3_gazebo)/launch/turtlebot3_gazebo_rviz.launch"/>
  
  <!-- Load the autonomos driving, for now -->
  <!-- <include file="$(find turtlebot3_gazebo)/launch/turtlebot3_simulation.launch"/> -->

    <!-- SLAM mapping node -->
  <node pkg="gmapping" type="slam_gmapping" name="turtlebot3_slam_gmapping">
    <param name="base_frame" value="$(arg set_base_frame)"/>
    <param name="odom_frame" value="$(arg set_odom_frame)"/>
    <param name="map_frame"  value="$(arg set_map_frame)"/>
      <!-- How often (in seconds) to update the map -->
    <param name="map_update_interval" value="2.0"/> 
      <!-- Maximum useable range of the laser -->
    <param name="maxUrange" value="3.0"/>
    <param name="linearUpdate" value="1.0"/>
    <param name="angularUpdate" value="0.2"/>
    <param name="temporalUpdate" value="0.5"/>
    <param name="resampleThreshold" value="0.5"/>
    <param name="particles" value="100"/>
      <!-- Initial map size in meters -->
    <param name="xmin" value="-10.0"/>
    <param name="ymin" value="-10.0"/>
    <param name="xmax" value="10.0"/>
    <param name="ymax" value="10.0"/>
      <!-- Resolution of the map, in meters per occupancy grid block -->
    <param name="delta" value="0.05"/>
  </node>

  <!-- Map server for navigation -->
  <include file="$(find composit_planner)/launch/nav_sim.launch"/>

  <!-- Trajectory listener and move_base executive -->
  <node pkg="composit_planner" type="nav_sub.py" name="nav_sub" output="screen"/>

  <!-- Trajectory formulation service -->
  <node pkg="composit_planner" type="obstacle_check_server.py" name="obstacle_check" output="screen"/>

  <!-- Trajectory planning spoof -->
  <!-- <node pkg="composit_planner" type="traj_spoof.py" name="traj_spoofer" output="screen"/> -->

  <!-- Cost map server -->
  <node pkg="composit_planner" type="costmap_server.py" name="costmap_server" output="screen"/>

</launch>
